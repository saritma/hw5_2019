from pathlib import Path 
import pandas as pd
import json
from pandas.io.json import json_normalize
import numpy as np
import matplotlib.pyplot as plt
class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """
    
    def __init__(self, data_fname):
        self.data_fname=data_fname

    def read_data(self):
        """
        Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname) as json_file:  
            self.data = json.load(json_file)
        self.a=json_normalize(self.data)
        self.a[self.a=='nan']=np.nan
                
        

    def show_age_distrib(self) :
        """
        Calculates and plots the age distribution of the participants.
        Returns a tuple containing two numpy arrays:
        The first item being the number of people in a given bin.
        The second item being the bin edges.
        """

        
        self.a.age.plot(kind='hist',bins=[0, 10,20,30,40,50,60,70,80,90,100])
        self.n, self.bins=np.histogram(self.a.age,bins=[0, 10,20,30,40,50,60,70,80,90,100])
        plt.show()
        return self.n , self.bins

    def remove_rows_without_mail(self) :
        """
        Checks self.data for rows with invalid emails, and removes them.
        Returns the corrected DataFrame, i.e. the same table but with
        the erroneous rows removed and the (ordinal) index after a reset.
        """
        df=[]
        for i in range(100):
            if '@' and '.com' in self.a.email[i]:
                df.append(i)
        self.d=self.a.iloc[df]
        self.d=self.d.reset_index(drop=True)
        return self.d

    def fill_na_with_mean(self) :
        """
        Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student. Returns the corrected DataFrame,
        as well as the row indices of the students that their new grades
        were generated.
        """
        b=self.a.loc[:,'q1':'q5']
        idx=np.where(b.isnull())

        for i in range(100):
            d=b.iloc[i]        
            d=d.fillna(np.nanmean(list(d)))
            b.iloc[i]=d

        self.a.loc[:,'q1':'q5']=b
        return self.a, idx[0]

if __name__=='__main__':
    data=QuestionnaireAnalysis('data.json')
    data.read_data()
    print(data.show_age_distrib())
    print(data.remove_rows_without_mail())
    print(data.fill_na_with_mean())

